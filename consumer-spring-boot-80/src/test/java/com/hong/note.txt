1.ServerListFilter -> AbstractServerListFilter  -> ZoneAffinityServerListFilter


1 判断是否有指定的区域配置、或者没有排除等相关的处理，以及存在有服务列表
@Override
public List<T> getFilteredListOfServers(List<T> servers) {
    if (zone != null && (zoneAffinity || zoneExclusive) && servers !=null && servers.size() > 0){
        List<T> filteredServers = Lists.newArrayList(Iterables.filter(
                servers, this.zoneAffinityPredicate.getServerOnlyPredicate()));
        if (shouldEnableZoneAffinity(filteredServers)) {
            return filteredServers;
        } else if (zoneAffinity) {
            overrideCounter.increment();
        }
    }
    return servers;
}

2 在进行区域判断的时候、会根据之前的负载均衡统计的结果来实现处理
private boolean shouldEnableZoneAffinity(List<T> filtered) {
    if (!zoneAffinity && !zoneExclusive) {
        return false;
    }
    if (zoneExclusive) {
        return true;
    }
    // 负载均衡的统计器
    LoadBalancerStats stats = getLoadBalancerStats();
    if (stats == null) {
        return zoneAffinity;
    } else {
        logger.debug("Determining if zone affinity should be enabled with given server list: {}", filtered);
        ZoneSnapshot snapshot = stats.getZoneSnapshot(filtered);
        // 获取调用的次数
        double loadPerServer = snapshot.getLoadPerServer();
        // 获取实例数量
        int instanceCount = snapshot.getInstanceCount();
        // 故障实例百分比
        int circuitBreakerTrippedCount = snapshot.getCircuitTrippedCount();
        if (((double) circuitBreakerTrippedCount) / instanceCount >=
                // 故障实例百分比
                blackOutServerPercentageThreshold.get()
                || loadPerServer >= activeReqeustsPerServerThreshold.get()
                || (instanceCount - circuitBreakerTrippedCount) < availableServersThreshold.get()) {
            logger.debug("zoneAffinity is overriden. blackOutServerPercentage: {}, activeReqeustsPerServer: {}, availableServers: {}",
                    new Object[] {(double) circuitBreakerTrippedCount / instanceCount,  loadPerServer, instanceCount - circuitBreakerTrippedCount});
            return false;
        } else {
            return true;
        }
    }
}


public interface IRule{

    // 实现负载均衡之中实例服务的选择操作  根据指定 的KEY 通过服务列表获取
    public Server choose(Object key);
    // 负载均衡器配置
    public void setLoadBalancer(ILoadBalancer lb);
    // 获取该规则下所使用的负载均衡器
    public ILoadBalancer getLoadBalancer();
}

public interface ILoadBalancer {

    // 保存加载到的全部服务列表数据
	public void addServers(List<Server> newServers);

	// 选择一个服务的实例
	public Server chooseServer(Object key);

	// 服务下线标记
	public void markServerDown(Server server);

	// 返回所有可用的服务列表
	@Deprecated
	public List<Server> getServerList(boolean availableOnly);

	// 返回所以可达的服务列表
    public List<Server> getReachableServers();

    // 返回所有可用以及不可用的服务列表
	public List<Server> getAllServers();
}